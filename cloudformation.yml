AWSTemplateFormatVersion: 2010-09-09
Description: aws-apig-swagger-generator
Parameters:
  BucketName:
    Description: Name of bucket to host swagger. Account number will be appended to this name.
    Type: String
    Default: swagger-server
Resources:
  SwaggerHostBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: !Ref BucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: false
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: ApplicationName
          Value: aws-apig-swagger-generator
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
  SwaggerHostPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref SwaggerHostBucket
      # TODO: Add cloudfront OAI
      PolicyDocument:
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: 'Allow'
            Resource:
              Fn::Join:
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref 'SwaggerHostBucket'
                  - '/*'
            Principal: '*'
  APIGMonitorRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: Rule to monitor APIG Changes
      EventPattern: { 'source': ['aws.apigateway'] }
      Name: apig-deployment-monitor
      State: ENABLED
      Targets:
        - Arn: !GetAtt SwaggerGeneratorLambda.Arn
          Id: SwaggerGeneratorLambda
  PermissionForEventsToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SwaggerGeneratorLambda
      Action: 'lambda:InvokeFunction'
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt APIGMonitorRule.Arn
  SwaggerGeneratorLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          const AWS = require('aws-sdk');
          var apigateway = new AWS.APIGateway();
          var s3 = new AWS.S3();

          exports.handler = (event, context) => {
            // console.log('Received event:', JSON.stringify(event, null, 2));
            // const invokeEvent = JSON.parse(JSON.stringify(event.invokingEvent));
            // console.log('event =', invokeEvent);
            // if (invokeEvent.configurationItem.ARN === "arn:aws:apigateway:us-east-1::/restapis/gw0oyswl80/stages/dev") {
              //   console.log('dev deployment changed');
              // }
            var params = {
              exportType: 'swagger',
              /* required */
              restApiId: process.env.restApiId,
              /* required */
              stageName: process.env.stage, //make this dynamic
              /* required */
              accepts: 'application/json'
            };
            apigateway.getExport(params, function(err, data) {
              if (err) console.log(err, err.stack); // an error occurred
              else {
                var bucketName = process.env.bucketName;
                var keyName = getKeyName('config', 'dev.json');
                var content = data.body;
                var params = { Bucket: bucketName, Key: keyName, Body: content };
                console.log(data); // successful response
                s3.putObject(params, function(err, data) {
                  if (err)
                    console.log(err)
                  else {
                    console.log("Successfully saved object to " + bucketName + "/" + keyName);
                  }
                })
              }
            })
          }

          function getKeyName(folder, filename) {
            return folder + '/' + filename;
          }
      Description: Lambda function to generate swagger yaml from apig deployment
      Environment:
        Variables:
          bucketName: !Ref SwaggerHostBucket
      FunctionName: SwaggerGeneratorLambda
      Handler: index.handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LambdaExecutionRoles'
      Runtime: nodejs12.x
      Tags:
        - Key: ApplicationName
          Value: aws-apig-swagger-generator
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'apigateway:GET'
                  - 's3:Get*'
                  - 's3:DeleteObject'
                  - 's3:Put*'
                  - 's3:ListBucket'
                Effect: 'Allow'
                Resource: '*'
          PolicyName: 'lambdaExec'
      Path: /
      # TODO: Change the role name later
      RoleName: lambdaExecutionRoleBeta
      Tags:
        - Key: ApplicationName
          Value: aws-apig-swagger-generator
